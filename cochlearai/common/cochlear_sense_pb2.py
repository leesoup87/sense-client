# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: cochlear_sense.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='cochlear_sense.proto',
  package='cochlear.ai',
  syntax='proto3',
  serialized_pb=_b('\n\x14\x63ochlear_sense.proto\x12\x0b\x63ochlear.ai\"6\n\x05input\x12\x0c\n\x04\x64\x61ta\x18\x01 \x01(\x0c\x12\x0f\n\x07subtask\x18\x02 \x01(\t\x12\x0e\n\x06\x61pikey\x18\x04 \x01(\t\"\x16\n\x06output\x12\x0c\n\x04pred\x18\x03 \x01(\t\":\n\x0binput_sense\x12\x0c\n\x04\x64\x61ta\x18\x05 \x01(\x0c\x12\x0c\n\x04task\x18\x06 \x01(\t\x12\x0f\n\x07subtask\x18\x07 \x01(\t\"\x1c\n\x0coutput_sense\x12\x0c\n\x04pred\x18\x08 \x01(\t2\x97\x04\n\x0e\x63ochlear_sense\x12<\n\x0f\x65vent_detection\x12\x12.cochlear.ai.input\x1a\x13.cochlear.ai.output\"\x00\x12=\n\x10gender_detection\x12\x12.cochlear.ai.input\x1a\x13.cochlear.ai.output\"\x00\x12:\n\rkey_detection\x12\x12.cochlear.ai.input\x1a\x13.cochlear.ai.output\"\x00\x12<\n\x0ftempo_detection\x12\x12.cochlear.ai.input\x1a\x13.cochlear.ai.output\"\x00\x12<\n\x0fgenre_detection\x12\x12.cochlear.ai.input\x1a\x13.cochlear.ai.output\"\x00\x12;\n\x0emood_detection\x12\x12.cochlear.ai.input\x1a\x13.cochlear.ai.output\"\x00\x12J\n\x1dmusic_speech_others_detection\x12\x12.cochlear.ai.input\x1a\x13.cochlear.ai.output\"\x00\x12G\n\x0e\x63ochlear_sense\x12\x18.cochlear.ai.input_sense\x1a\x19.cochlear.ai.output_sense\"\x00\x62\x06proto3')
)




_INPUT = _descriptor.Descriptor(
  name='input',
  full_name='cochlear.ai.input',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data', full_name='cochlear.ai.input.data', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='subtask', full_name='cochlear.ai.input.subtask', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='apikey', full_name='cochlear.ai.input.apikey', index=2,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=37,
  serialized_end=91,
)


_OUTPUT = _descriptor.Descriptor(
  name='output',
  full_name='cochlear.ai.output',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pred', full_name='cochlear.ai.output.pred', index=0,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=93,
  serialized_end=115,
)


_INPUT_SENSE = _descriptor.Descriptor(
  name='input_sense',
  full_name='cochlear.ai.input_sense',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data', full_name='cochlear.ai.input_sense.data', index=0,
      number=5, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='task', full_name='cochlear.ai.input_sense.task', index=1,
      number=6, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='subtask', full_name='cochlear.ai.input_sense.subtask', index=2,
      number=7, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=117,
  serialized_end=175,
)


_OUTPUT_SENSE = _descriptor.Descriptor(
  name='output_sense',
  full_name='cochlear.ai.output_sense',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pred', full_name='cochlear.ai.output_sense.pred', index=0,
      number=8, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=177,
  serialized_end=205,
)

DESCRIPTOR.message_types_by_name['input'] = _INPUT
DESCRIPTOR.message_types_by_name['output'] = _OUTPUT
DESCRIPTOR.message_types_by_name['input_sense'] = _INPUT_SENSE
DESCRIPTOR.message_types_by_name['output_sense'] = _OUTPUT_SENSE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

input = _reflection.GeneratedProtocolMessageType('input', (_message.Message,), dict(
  DESCRIPTOR = _INPUT,
  __module__ = 'cochlear_sense_pb2'
  # @@protoc_insertion_point(class_scope:cochlear.ai.input)
  ))
_sym_db.RegisterMessage(input)

output = _reflection.GeneratedProtocolMessageType('output', (_message.Message,), dict(
  DESCRIPTOR = _OUTPUT,
  __module__ = 'cochlear_sense_pb2'
  # @@protoc_insertion_point(class_scope:cochlear.ai.output)
  ))
_sym_db.RegisterMessage(output)

input_sense = _reflection.GeneratedProtocolMessageType('input_sense', (_message.Message,), dict(
  DESCRIPTOR = _INPUT_SENSE,
  __module__ = 'cochlear_sense_pb2'
  # @@protoc_insertion_point(class_scope:cochlear.ai.input_sense)
  ))
_sym_db.RegisterMessage(input_sense)

output_sense = _reflection.GeneratedProtocolMessageType('output_sense', (_message.Message,), dict(
  DESCRIPTOR = _OUTPUT_SENSE,
  __module__ = 'cochlear_sense_pb2'
  # @@protoc_insertion_point(class_scope:cochlear.ai.output_sense)
  ))
_sym_db.RegisterMessage(output_sense)



_COCHLEAR_SENSE = _descriptor.ServiceDescriptor(
  name='cochlear_sense',
  full_name='cochlear.ai.cochlear_sense',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=208,
  serialized_end=743,
  methods=[
  _descriptor.MethodDescriptor(
    name='event_detection',
    full_name='cochlear.ai.cochlear_sense.event_detection',
    index=0,
    containing_service=None,
    input_type=_INPUT,
    output_type=_OUTPUT,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='gender_detection',
    full_name='cochlear.ai.cochlear_sense.gender_detection',
    index=1,
    containing_service=None,
    input_type=_INPUT,
    output_type=_OUTPUT,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='key_detection',
    full_name='cochlear.ai.cochlear_sense.key_detection',
    index=2,
    containing_service=None,
    input_type=_INPUT,
    output_type=_OUTPUT,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='tempo_detection',
    full_name='cochlear.ai.cochlear_sense.tempo_detection',
    index=3,
    containing_service=None,
    input_type=_INPUT,
    output_type=_OUTPUT,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='genre_detection',
    full_name='cochlear.ai.cochlear_sense.genre_detection',
    index=4,
    containing_service=None,
    input_type=_INPUT,
    output_type=_OUTPUT,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='mood_detection',
    full_name='cochlear.ai.cochlear_sense.mood_detection',
    index=5,
    containing_service=None,
    input_type=_INPUT,
    output_type=_OUTPUT,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='music_speech_others_detection',
    full_name='cochlear.ai.cochlear_sense.music_speech_others_detection',
    index=6,
    containing_service=None,
    input_type=_INPUT,
    output_type=_OUTPUT,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='cochlear_sense',
    full_name='cochlear.ai.cochlear_sense.cochlear_sense',
    index=7,
    containing_service=None,
    input_type=_INPUT_SENSE,
    output_type=_OUTPUT_SENSE,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_COCHLEAR_SENSE)

DESCRIPTOR.services_by_name['cochlear_sense'] = _COCHLEAR_SENSE

# @@protoc_insertion_point(module_scope)
